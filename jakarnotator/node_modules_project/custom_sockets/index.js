'use strict';

let socketIo = require('socket.io'); // Utilities for real time connection
let WatchJS = require('melanke-watchjs');

let watch = WatchJS.watch;

let io = socketIo();

function Sockets(server) {
    let server_data = server._events.request.app_data;

    watch(server_data, "processing_masks_status", function (prop, action, difference, oldvalue) {
        if (difference !== oldvalue){
            // console.log("prop: " + prop + "\n action: " + action + "\n difference: " + JSON.stringify(difference) + "\n old: " + JSON.stringify(oldvalue) + "\n ... and the context: " + JSON.stringify(this));
            io.sockets.to("admin_panel_enter").emit('processing_masks_status', server_data.processing_masks_status);
        }
    });

    // Gestion des sockets
    io.sockets.on('connection', function (socket, pseudo) {

        console.log(socket.id + " is now connected ! ");

        socket.on('room-join', function (room) {
            socket.join(room);
            console.log(socket.id + " has joined the room  " + room)
        });

        socket.on('room-leave', function (room) {
            socket.leave(room);
            console.log(socket.id + " has left the room  " + room)
        });

        socket.on('send_a_new_json', function (room) {
            console.log("To all connected people in the room " + room + ". You should refresh the json for this image.")
            socket.to(room).broadcast.emit('should_refresh_json');
        });

        socket.on('disconnect', function () {
            console.log(socket.id + 'user disconnected');
        });

        socket.on('admin_panel_enter', function (data) {
            socket.join("admin_panel_enter");
            // console.log(socket.id + " has joined the room  " + "admin_panel_enter")
            socket.emit('processing_masks_status', server_data.processing_masks_status);
        });

    });

    io.attach(server);
    return server;
}


module.exports = Sockets;
